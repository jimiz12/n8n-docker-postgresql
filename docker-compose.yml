version: "3.8"

services:
  postgres:
    image: postgres:16-alpine
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-n8n}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-n8npass}
      POSTGRES_DB: ${POSTGRES_DB:-n8n}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-n8n} -d ${POSTGRES_DB:-n8n}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks: [app]
    restart: unless-stopped

  redis:
    image: redis:7-alpine
    command: ["redis-server", "--appendonly", "yes"]
    # For production, set REDIS_PASSWORD in .env and use:
    # command: ["redis-server", "--appendonly", "yes", "--requirepass", "${REDIS_PASSWORD}"]
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks: [app]
    restart: unless-stopped

  n8n:
    image: n8nio/n8n:latest
    # Local default: expose 5678
    ports:
      - "5678:5678"
    environment:
      # Database
      DB_TYPE: postgresdb
      DB_POSTGRESDB_HOST: postgres
      DB_POSTGRESDB_PORT: 5432
      DB_POSTGRESDB_DATABASE: ${POSTGRES_DB}
      DB_POSTGRESDB_USER: ${POSTGRES_USER}
      DB_POSTGRESDB_PASSWORD: ${POSTGRES_PASSWORD}

      # Encryption
      N8N_ENCRYPTION_KEY: ${N8N_ENCRYPTION_KEY}

      # Host & URLs (single var pattern)
      N8N_HOST: ${N8N_HOSTNAME:-localhost}
      N8N_PORT: 5678
      # Protocol remains http; external URLs come from WEBHOOK_URL
      N8N_PROTOCOL: ${N8N_PROTOCOL:-http}
      WEBHOOK_URL: ${N8N_HOSTNAME:+https://}${N8N_HOSTNAME:-http://localhost:5678}/

      # Timezone
      GENERIC_TIMEZONE: ${GENERIC_TIMEZONE:-America/Detroit}

      # Redis (queue)
      QUEUE_BULL_REDIS_HOST: redis
      QUEUE_BULL_REDIS_PORT: 6379
      QUEUE_BULL_REDIS_DB: ${REDIS_DB:-0}
      QUEUE_BULL_REDIS_PASSWORD: ${REDIS_PASSWORD:-}

      # Cookies secure in prod (set PRODUCTION=true to enable)
      N8N_SECURE_COOKIE: ${PRODUCTION:-false}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - n8n_data:/home/node/.n8n
    networks: [app]
    restart: unless-stopped

  # Only runs in production
  caddy:
    image: caddy:2-alpine
    depends_on:
      - n8n
    ports:
      - "80:80"
      - "443:443"
    environment:
      ACME_EMAIL: ${ACME_EMAIL}
      N8N_HOSTNAME: ${N8N_HOSTNAME}
    volumes:
      - ./Caddyfile:/etc/caddy/Caddyfile:ro
      - caddy_data:/data
      - caddy_config:/config
    networks: [app]
    restart: unless-stopped
    profiles: ["prod"]

networks:
  app:

volumes:
  postgres_data:
  redis_data:
  n8n_data:
  caddy_data:
  caddy_config:
